# Wyja≈õnienie sk≈Çadni Python: difficulty: Optional[int] = None, @dataclass, @staticmethod, @method

1. difficulty: Optional[int] = None
--------------------------------------------------
Oznacza, ≈ºe pole 'difficulty' mo≈ºe byƒá liczbƒÖ ca≈ÇkowitƒÖ (int) lub None (brak warto≈õci).
- 'Optional[int]' to podpowied≈∫ typu (type hint) z typing, czyli: int LUB None.
- '= None' ustawia domy≈õlnƒÖ warto≈õƒá na None.
Przyk≈Çad:
    difficulty = 2      # OK
    difficulty = None   # OK
    difficulty = 3.5    # B≈ÅƒÑD (to float, nie int)

2. @dataclass
--------------------------------------------------
Dekorator z biblioteki 'dataclasses', kt√≥ry automatycznie generuje metody __init__, __repr__, __eq__ itd. dla klasy.
U≈Çatwia tworzenie klas do przechowywania danych.
Przyk≈Çad:
    @dataclass
    class Example:
        x: int
        y: str = "abc"
    # Tworzenie obiektu: obj = Example(5)

3. @staticmethod
--------------------------------------------------
Dekorator, kt√≥ry oznacza metodƒô jako statycznƒÖ:
- Nie ma dostƒôpu do self (obiektu) ani cls (klasy)
- Mo≈ºna jƒÖ wywo≈Çaƒá bez tworzenia obiektu
Przyk≈Çad:
    class Math:
        @staticmethod
        def add(a, b):
            return a + b
    Math.add(2, 3)  # = 5

4. @method
--------------------------------------------------
W Pythonie NIE MA dekoratora @method!
Najczƒô≈õciej spotykane dekoratory dla metod w klasie to:
- @staticmethod   # metoda statyczna (patrz wy≈ºej)
- @classmethod    # metoda klasowa (pierwszy argument to cls)
- @property       # pozwala u≈ºywaƒá metody jak atrybutu

Przyk≈Çad @classmethod:
    class Example:
        @classmethod
        def create_default(cls):
            return cls(0)

Przyk≈Çad @property:
    class Circle:
        def __init__(self, r):
            self.r = r
        @property
        def area(self):
            return 3.14 * self.r ** 2
    c = Circle(2)
    print(c.area)  # = 12.56

Podsumowanie:
--------------------------------------------------
- Optional[int] = None: pole mo≈ºe byƒá int lub None
- @dataclass: automatyczne generowanie metod dla klasy danych
- @staticmethod: metoda w klasie, kt√≥ra nie korzysta z self/cls
- @method: NIE ISTNIEJE w Pythonie, sƒÖ za to @staticmethod, @classmethod, @property

# Wyja≈õnienie sk≈Çadni Python: difficulty: Optional[int] = None, @dataclass, @staticmethod, @method 

==================================================================================================================

# Jak system pobiera informacje o punktach charakterystycznych w pobli≈ºu tras (schroniska, szczyty, itp.)?

5. System identyfikacji punkt√≥w charakterystycznych
--------------------------------------------------
System automatycznie wykrywa punkty charakterystyczne w pobli≈ºu tras u≈ºywajƒÖc klasy TextProcessor 
z modu≈Çu analyzers/text_processor.py. Proces dzia≈Ça w nastƒôpujƒÖcy spos√≥b:

MECHANIZM DZIA≈ÅANIA:
1. Analiza opis√≥w tras za pomocƒÖ wyra≈ºe≈Ñ regularnych (regex)
2. Identyfikacja r√≥≈ºnych typ√≥w punkt√≥w charakterystycznych
3. Przechowywanie w strukturze danych ExtractedTrailInfo
4. Integracja z danymi trasy i bazƒÖ danych

TYPY ROZPOZNAWANYCH PUNKT√ìW:
- Schroniska: regex pattern (schronisko\s+\w+)
- Szczyty: regex pattern (szczyt\s+\w+)  
- Prze≈Çƒôcze: regex pattern (prze≈Çƒôcz\s+\w+)
- Doliny: regex pattern (dolina\s+\w+)
- Jeziora: regex pattern (jezioro\s+\w+)
- Wodospady: regex pattern (wodospad\s+\w+)
- Punkty widokowe: regex pattern (punkt\s+widokowy)

PRZYK≈ÅADY U≈ªYCIA:
```python
processor = TextProcessor()
landmarks = processor.extract_landmarks("Przej≈õcie przez schronisko Morskie Oko")
# Zwr√≥ci: ["schronisko Morskie Oko"]

landmarks = processor.extract_landmarks("Szczyt Rysy oferuje wspania≈Çe widoki")
# Zwr√≥ci: ["szczyt Rysy"]

landmarks = processor.extract_landmarks("Prze≈Çƒôcz Zawrat jest punktem widokowym")
# Zwr√≥ci: ["prze≈Çƒôcz Zawrat", "punkt widokowy"]
```

STRUKTURA DANYCH:
```python
@dataclass
class ExtractedTrailInfo:
    duration_minutes: Optional[int] = None      # Czas przej≈õcia
    elevation_gain: Optional[int] = None        # Przewy≈ºszenie
    landmarks: List[str] = None                 # Punkty charakterystyczne
    warnings: List[str] = None                  # Ostrze≈ºenia
    coordinates: Optional[Tuple[str, str]] = None # Wsp√≥≈Çrzƒôdne GPS
    difficulty_level: Optional[str] = None      # Poziom trudno≈õci
    recommended_season: Optional[str] = None    # Zalecana pora roku
```

INTEGRACJA Z SYSTEMEM:
- Metoda extract_landmarks(text) analizuje tekst opisu trasy
- Zwraca listƒô unikalnych punkt√≥w (bez duplikat√≥w)
- Punkty sƒÖ wy≈õwietlane w interfejsie: "üèõÔ∏è Punkty charakterystyczne: schronisko Morskie Oko, szczyt Rysy"
- Dane sƒÖ przechowywane w bazie danych i powiƒÖzane z trasami
- Metoda enhance_trail_data() rozszerza dane trasy o wyekstraktowane informacje

OBS≈ÅUGA B≈ÅƒòD√ìW:
- System loguje informacje o przetwarzaniu
- Obs≈Çuguje przypadki braku punkt√≥w charakterystycznych
- Zachowuje sp√≥jno≈õƒá danych nawet przy b≈Çƒôdach przetwarzania
- Dodaje znacznik czasu przetwarzania

Ten system pozwala na automatyczne wzbogacanie informacji o trasach bez konieczno≈õci 
rƒôcznego wprowadzania danych o punktach charakterystycznych. 