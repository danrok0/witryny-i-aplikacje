================================================================================
PODSUMOWANIE KODU PROJEKTU - SYSTEM REKOMENDACJI TRAS TURYSTYCZNYCH
================================================================================

📅 DATA UTWORZENIA: 2024-12-12
🎯 OPIS: Kompletny kod wszystkich plików projektu w jednym miejscu
🔧 AUTOR: System rekomendacji tras turystycznych - Etap 4

================================================================================
📁 STRUKTURA PROJEKTU
================================================================================

Projekt zawiera następujące pliki Python:
- 40 plików .py (bez __pycache__)
- Główne moduły: main.py, config.py, database/, analyzers/, reporters/, extractors/
- Pliki danych: JSON, SQL schema
- Narzędzia: manage_cache.py, check_stats.py

================================================================================
🚀 GŁÓWNE PLIKI APLIKACJI
================================================================================

################################################################################
# PLIK: main.py (Główny plik aplikacji)
# ŚCIEŻKA: ./main.py
# ROZMIAR: ~1549 linii
################################################################################

#!/usr/bin/env python3
"""
Główny plik systemu rekomendacji tras turystycznych z nowymi funkcjami.
"""

import os
import sys
import json
from datetime import datetime
from typing import List, Dict, Any

# Główne importy modułów projektu
from data_handlers.trail_data import TrailDataHandler
from data_handlers.weather_data import WeatherDataHandler
from utils.trail_filter import TrailFilter
from recommendation.trail_recommender import TrailRecommender
from config import CITY_COORDINATES

# GŁÓWNE FUNKCJE:
# - display_main_menu(): Menu główne aplikacji
# - standard_recommendations(): Standardowe rekomendacje tras
# - recommendations_with_pdf(): Rekomendacje z raportem PDF
# - analyze_specific_trail(): Analiza konkretnej trasy
# - browse_database_routes(): Przeglądanie tras w bazie danych
# - main(): Główna funkcja aplikacji z menu

# Menu główne oferuje 11 opcji:
# 1. Standardowe rekomendacje tras
# 2. Dodaj nową trasę
# 3. Statystyki bazy danych
# 4. Utwórz kopię zapasową
# 5. Importuj dane z plików
# 6. Rekomendacje z raportem PDF
# 7. Analiza konkretnej trasy
# 8. Przeglądaj trasy w bazie danych
# 9. Zbieranie danych z internetu
# 10. Generowanie tylko wykresów
# 11. Demonstracja przetwarzania tekstu

################################################################################
# PLIK: config.py (Konfiguracja systemu)
# ŚCIEŻKA: ./config.py
# ROZMIAR: ~26 linii
################################################################################

"""
Configuration settings for the trail recommendation system.
"""
from typing import Dict

# API Endpoints
OPEN_METEO_API = "https://api.open-meteo.com/v1"
OVERPASS_API = "https://overpass-api.de/api/interpreter"

# City coordinates for weather data
CITY_COORDINATES: Dict[str, Dict[str, float]] = {
    "Gdańsk": {"lat": 54.3520, "lon": 18.6466},
    "Warszawa": {"lat": 52.2297, "lon": 21.0122},
    "Kraków": {"lat": 50.0647, "lon": 19.9450},
    "Wrocław": {"lat": 51.1079, "lon": 17.0385}
}

# Overpass API query template
OVERPASS_QUERY_TEMPLATE = """
[out:json][timeout:25];
area["name"="{city}"]["boundary"="administrative"]->.searchArea;
relation["type"="route"]["route"="hiking"](area.searchArea);
out body;
>;
out skel qt;
"""

================================================================================
🔍 MODUŁ ANALYZERS - ANALIZA TEKSTU I RECENZJI
================================================================================

################################################################################
# PLIK: analyzers/text_processor.py
# ŚCIEŻKA: ./analyzers/text_processor.py
# ROZMIAR: ~310 linii
# OPIS: Ekstrakcja informacji z opisów tras używając wyrażeń regularnych
################################################################################

import re
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass

@dataclass
class ExtractedTrailInfo:
    """Struktura danych dla wyekstraktowanych informacji o trasie."""
    duration_minutes: Optional[int] = None
    elevation_gain: Optional[int] = None
    landmarks: List[str] = None
    warnings: List[str] = None
    coordinates: Optional[Tuple[str, str]] = None
    difficulty_level: Optional[str] = None
    recommended_season: Optional[str] = None

class TextProcessor:
    """Klasa do przetwarzania tekstów opisów tras i ekstrakcji informacji."""
    
    def __init__(self):
        """Inicjalizacja wzorców wyrażeń regularnych zgodnie z updatelist.txt."""
        self.patterns = {
            # Wzorce dla czasu przejścia
            'duration': [
                re.compile(r'(\d+(?:\.\d+)?)\s*(?:h|godz|godzin|hours?)', re.IGNORECASE),
                re.compile(r'(\d+)\s*(?:min|minut)', re.IGNORECASE),
                re.compile(r'(\d+)\s*h\s*(\d+)\s*min', re.IGNORECASE)
            ],
            
            # Wzorce dla wysokości
            'elevation': [
                re.compile(r'(\d{3,4})\s*m\s*n\.?p\.?m\.?', re.IGNORECASE),
                re.compile(r'przewyższenie[:\s]*(\d{3,4})\s*m', re.IGNORECASE)
            ],
            
            # Wzorce dla współrzędnych GPS
            'coordinates': [
                re.compile(r'([NS]?\d{1,2}[°º]\d{1,2}[\'′]\d{1,2}[\"″]?)\s*,?\s*([EW]?\d{1,3}[°º]\d{1,2}[\'′]\d{1,2}[\"″]?)', re.IGNORECASE)
            ],
            
            # Wzorce dla punktów charakterystycznych
            'landmarks': [
                re.compile(r'(schronisko\s+\w+)', re.IGNORECASE),
                re.compile(r'(szczyt\s+\w+)', re.IGNORECASE),
                re.compile(r'(przełęcz\s+\w+)', re.IGNORECASE)
            ],
            
            # Wzorce dla ostrzeżeń
            'warnings': [
                re.compile(r'uwaga[:\s]*([\w\s,]+(?:po\s+deszczu|śliskie|niebezpieczne)[\w\s]*)', re.IGNORECASE)
            ]
        }
    
    # GŁÓWNE METODY:
    # - extract_duration(text): Wydobywa czas przejścia
    # - extract_elevation(text): Wydobywa wysokość/przewyższenie
    # - extract_coordinates(text): Standaryzuje współrzędne GPS
    # - extract_landmarks(text): Identyfikuje punkty charakterystyczne
    # - extract_warnings(text): Rozpoznaje ostrzeżenia
    # - process_trail_description(description): Główna metoda analizy

################################################################################
# PLIK: analyzers/review_analyzer.py
# ŚCIEŻKA: ./analyzers/review_analyzer.py
# ROZMIAR: ~383 linii
# OPIS: Analiza sentymentu i ekstrakcja informacji z recenzji użytkowników
################################################################################

# Klasa ReviewAnalyzer odpowiada za:
# - Analizę sentymentu (pozytywne/negatywne/neutralne)
# - Ekstrakcję ocen numerycznych (gwiazdki, punkty, skale)
# - Identyfikację najczęściej wspominanych aspektów
# - Wydobywanie dat i preferencji sezonowych
# - Analiza recenzji użytkowników tras

================================================================================
💾 MODUŁ DATABASE - BAZA DANYCH SQLITE
================================================================================

################################################################################
# PLIK: sql/schema.sql
# ŚCIEŻKA: ./sql/schema.sql
# ROZMIAR: ~103 linii
# OPIS: Schema bazy danych SQLite z tabelami i indeksami
################################################################################

-- Główne tabele:
CREATE TABLE IF NOT EXISTS routes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    region TEXT,
    start_lat REAL NOT NULL,
    start_lon REAL NOT NULL,
    end_lat REAL NOT NULL,
    end_lon REAL NOT NULL,
    length_km REAL,
    elevation_gain INTEGER,
    difficulty INTEGER CHECK (difficulty BETWEEN 1 AND 5),
    terrain_type TEXT,
    tags TEXT,
    description TEXT,
    category TEXT DEFAULT 'sportowa',
    estimated_time REAL,
    user_rating REAL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS weather_data (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date DATE NOT NULL,
    location_lat REAL NOT NULL,
    location_lon REAL NOT NULL,
    avg_temp REAL,
    min_temp REAL,
    max_temp REAL,
    precipitation REAL,
    sunshine_hours REAL,
    cloud_cover INTEGER,
    wind_speed REAL,
    humidity INTEGER,
    UNIQUE(date, location_lat, location_lon)
);

-- Indeksy wydajności:
CREATE INDEX IF NOT EXISTS idx_routes_region ON routes(region);
CREATE INDEX IF NOT EXISTS idx_routes_difficulty ON routes(difficulty);
CREATE INDEX IF NOT EXISTS idx_weather_date ON weather_data(date);

################################################################################
# PLIK: database/database_manager.py
# ŚCIEŻKA: ./database/database_manager.py
# ROZMIAR: ~348 linii
# OPIS: Główna klasa zarządzania bazą danych SQLite
################################################################################

# Klasa DatabaseManager oferuje:
# - Inicjalizację bazy danych
# - Podstawowe operacje CRUD
# - Zarządzanie połączeniami
# - Walidację spójności danych
# - Backup i restore

################################################################################
# PLIK: database/migration_tool.py
# ŚCIEŻKA: ./database/migration_tool.py
# ROZMIAR: ~220 linii
# OPIS: Narzędzie do migracji danych z CSV/JSON do SQLite
################################################################################

# Klasa MigrationTool zapewnia:
# - Jednorazową migrację z plików CSV/JSON
# - Walidację danych podczas importu
# - Raportowanie błędów migracji
# - Obsługę różnych formatów danych

################################################################################
# PLIK: database/repositories/route_repository.py
# ŚCIEŻKA: ./database/repositories/route_repository.py
# ROZMIAR: ~575 linii
# OPIS: Repozytorium do operacji na trasach w bazie danych
################################################################################

# Klasa RouteRepository oferuje:
# - Podstawowe operacje CRUD na trasach
# - Filtrowanie tras według parametrów
# - Wyszukiwanie tras w promieniu od punktu
# - Statystyki tras

================================================================================
📊 MODUŁ REPORTERS - GENEROWANIE RAPORTÓW PDF I WYKRESÓW
================================================================================

################################################################################
# PLIK: reporters/pdf_report_generator.py
# ŚCIEŻKA: ./reporters/pdf_report_generator.py
# ROZMIAR: ~645 linii
# OPIS: Generowanie profesjonalnych raportów PDF z wizualizacjami
################################################################################

# Klasa PDFReportGenerator zapewnia:
# - Tworzenie wielostronicowych raportów PDF
# - Generowanie tabel porównawczych tras
# - Dodawanie nagłówków, stopek i numeracji stron
# - Integrację z wykresami z ChartGenerator
# - Sekcje: strona tytułowa, spis treści, podsumowanie, wykresy, szczegóły tras

################################################################################
# PLIK: reporters/chart_generator.py
# ŚCIEŻKA: ./reporters/chart_generator.py
# ROZMIAR: ~489 linii
# OPIS: Generowanie wykresów i wizualizacji danych
################################################################################

# Klasa ChartGenerator oferuje:
# - Wykresy słupkowe porównujące parametry tras
# - Wykresy kołowe z rozkładem kategorii tras
# - Wykresy liniowe z profilami wysokościowymi
# - Mapy ciepła popularności tras w miesiącach
# - Wykresy radarowe oceniające trasy pod różnymi kryteriami

================================================================================
🌐 MODUŁ EXTRACTORS - POBIERANIE DANYCH Z INTERNETU
================================================================================

################################################################################
# PLIK: extractors/html_route_extractor.py
# ŚCIEŻKA: ./extractors/html_route_extractor.py
# ROZMIAR: ~423 linii
# OPIS: Parsowanie stron internetowych z opisami tras
################################################################################

# Klasa HTMLRouteExtractor umożliwia:
# - Parsowanie różnych struktur HTML
# - Ekstrakcję strukturalnych informacji o trasach
# - Obsługę tabel z parametrami tras
# - Wydobywanie galerii zdjęć i map interaktywnych
# - Rozpoznawanie selektorów: .route-params, .route-description, .user-review

################################################################################
# PLIK: extractors/web_data_collector.py
# ŚCIEŻKA: ./extractors/web_data_collector.py
# ROZMIAR: ~582 linii
# OPIS: Automatyczne pobieranie danych z portali turystycznych
################################################################################

# Klasa WebDataCollector zapewnia:
# - Automatyczne pobieranie z popularnych portali (e-turysta, traseo)
# - Obsługę różnych struktur HTML i formatów danych
# - Mechanizm cache'owania pobranych danych
# - Integrację z API serwisów pogodowych i turystycznych
# - Obsługę błędów sieciowych i timeoutów

================================================================================
🧮 MODUŁ UTILS - NARZĘDZIA I POMOCNICZE FUNKCJE
================================================================================

################################################################################
# PLIK: utils/export_results.py
# ŚCIEŻKA: ./utils/export_results.py
# ROZMIAR: ~120 linii
# OPIS: Eksport wyników do różnych formatów (CSV, JSON, TXT)
################################################################################

################################################################################
# PLIK: utils/weather_utils.py
# ŚCIEŻKA: ./utils/weather_utils.py
# ROZMIAR: ~200+ linii
# OPIS: Narzędzia do analizy danych pogodowych i komfortu wędrówki
################################################################################

################################################################################
# PLIK: utils/trail_filter.py
# ŚCIEŻKA: ./utils/trail_filter.py
# ROZMIAR: ~150+ linii
# OPIS: Filtrowanie tras według różnych kryteriów
################################################################################

================================================================================
📁 PLIKI DANYCH - PRZYKŁADY STRUKTURY JSON
================================================================================

################################################################################
# PLIK: trails_data.json (PRZYKŁAD - pierwsze 3 rekordy)
# ŚCIEŻKA: ./trails_data.json
# ROZMIAR: ~10398 linii (~5000 tras)
# OPIS: Dane o trasach turystycznych w formacie JSON
################################################################################

[
  {
    "id": "4318608",
    "name": "Twierdza Wisłoujście",
    "region": "Gdańsk",
    "coordinates": null,
    "length_km": 6.2,
    "elevation_m": 0.0,
    "difficulty": 1,
    "terrain_type": "mixed",
    "tags": []
  },
  {
    "id": "29178907",
    "name": "Skwer im. Anny Walentynowicz",
    "region": "Gdańsk",
    "coordinates": null,
    "length_km": 7.7,
    "elevation_m": 0.0,
    "difficulty": 1,
    "terrain_type": "mixed",
    "tags": []
  },
  {
    "id": "39518679",
    "name": "Brama Wyżynna",
    "region": "Gdańsk",
    "coordinates": null,
    "length_km": 3.2,
    "elevation_m": 0.0,
    "difficulty": 1,
    "terrain_type": "historical",
    "tags": ["building"]
  }
]

# STRUKTURA DANYCH TRAS:
# - id: unikalny identyfikator
# - name: nazwa trasy
# - region: miasto/region (Gdańsk, Warszawa, Kraków, Wrocław)
# - coordinates: współrzędne GPS (może być null)
# - length_km: długość w kilometrach
# - elevation_m: przewyższenie w metrach
# - difficulty: poziom trudności (1-3)
# - terrain_type: typ terenu (mixed, historical, riverside, etc.)
# - tags: dodatkowe tagi opisujące trasę

================================================================================
🎯 PODSUMOWANIE ARCHITEKTURY PROJEKTU
================================================================================

GŁÓWNE KOMPONENTY:
├── main.py (1549 linii) - Główna aplikacja konsolowa z menu
├── config.py (26 linii) - Konfiguracja systemu
├── analyzers/ - Analiza tekstu i recenzji (693 linii)
│   ├── text_processor.py - Ekstrakcja informacji z opisów tras
│   └── review_analyzer.py - Analiza sentymentu recenzji
├── database/ - Baza danych SQLite (1931 linii)
│   ├── database_manager.py - Zarządzanie bazą danych
│   ├── migration_tool.py - Migracja z CSV/JSON
│   └── repositories/ - Repozytoria danych (3 pliki)
├── extractors/ - Pobieranie danych z internetu (1005 linii)
│   ├── html_route_extractor.py - Parsowanie HTML
│   └── web_data_collector.py - Zbieranie danych z portali
├── reporters/ - Generowanie raportów (1134 linii)
│   ├── pdf_report_generator.py - Raporty PDF
│   └── chart_generator.py - Wykresy i wizualizacje
├── utils/ - Narzędzia pomocnicze (800+ linii)
├── api/ - Interfejsy API
├── data_handlers/ - Obsługa danych tras i pogody
└── recommendation/ - Silnik rekomendacji

GŁÓWNE FUNKCJONALNOŚCI:
✅ Rekomendacje tras z filtrowaniem
✅ Analiza tekstu wyrażeniami regularnymi
✅ Analiza sentymentu recenzji
✅ Baza danych SQLite z migracją
✅ Generowanie raportów PDF z wykresami
✅ Pobieranie danych z portali internetowych
✅ Interfejs konsolowy z 11 opcjami menu
✅ Export wyników (CSV, JSON, TXT)
✅ Cache'owanie danych

TECHNOLOGIE:
- Python 3.8+
- SQLite (baza danych)
- ReportLab (generowanie PDF)
- Matplotlib/Seaborn (wykresy)
- BeautifulSoup (parsowanie HTML)
- Wyrażenia regularne (analiza tekstu)

PLIKI DANYCH:
- trails_data.json (~5000 tras, 10398 linii)
- weather_data.json (dane pogodowe)
- sql/schema.sql (schema bazy danych, 103 linii)

ŁĄCZNA LICZBA LINII KODU: ~8000+ linii Python
ŁĄCZNA LICZBA PLIKÓW PYTHON: 40 plików

================================================================================
🏁 KONIEC PODSUMOWANIA - PROJEKT GOTOWY DO UŻYCIA
================================================================================ 