from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QProgressBar, QScrollArea, QFrame, QPushButton, QTabWidget)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QColor, QPalette
from core.objectives import ObjectiveManager, ObjectiveStatus

class ObjectiveWidget(QFrame):
    """Widget reprezentujƒÖcy pojedynczy cel"""
    
    def __init__(self, objective, parent=None):
        super().__init__(parent)
        self.objective = objective
        self.init_ui()
    
    def init_ui(self):
        self.setFrameStyle(QFrame.Shape.Box)
        self.setLineWidth(1)
        
        layout = QVBoxLayout()
        
        # Tytu≈Ç celu
        title_label = QLabel(self.objective.title)
        title_font = QFont()
        title_font.setBold(True)
        title_font.setPointSize(12)
        title_label.setFont(title_font)
        
        # Kolor tytu≈Çu w zale≈ºno≈õci od statusu
        if self.objective.status == ObjectiveStatus.COMPLETED:
            title_label.setStyleSheet("color: green;")
        elif self.objective.status == ObjectiveStatus.FAILED:
            title_label.setStyleSheet("color: red;")
        elif self.objective.status == ObjectiveStatus.ACTIVE:
            title_label.setStyleSheet("color: blue;")
        else:
            title_label.setStyleSheet("color: gray;")
        
        layout.addWidget(title_label)
        
        # Opis celu
        desc_label = QLabel(self.objective.description)
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("color: #666; font-size: 10px;")
        layout.addWidget(desc_label)
        
        # Pasek postƒôpu
        if self.objective.status == ObjectiveStatus.ACTIVE:
            progress_layout = QHBoxLayout()
            
            progress_bar = QProgressBar()
            progress_bar.setMinimum(0)
            progress_bar.setMaximum(int(self.objective.target_value))
            progress_bar.setValue(int(self.objective.current_value))
            progress_bar.setFormat(f"{int(self.objective.current_value)}/{int(self.objective.target_value)}")
            
            progress_layout.addWidget(progress_bar)
            
            # Procent uko≈Ñczenia
            if self.objective.target_value > 0:
                percentage = (self.objective.current_value / self.objective.target_value) * 100
                percent_label = QLabel(f"{percentage:.1f}%")
                percent_label.setMinimumWidth(50)
                progress_layout.addWidget(percent_label)
            
            layout.addLayout(progress_layout)
        
        # Status i limit czasu
        status_layout = QHBoxLayout()
        
        status_label = QLabel(f"Status: {self.objective.status.value}")
        status_layout.addWidget(status_label)
        
        if self.objective.turns_remaining is not None:
            time_label = QLabel(f"Pozosta≈Ço tur: {self.objective.turns_remaining}")
            time_label.setStyleSheet("color: orange; font-weight: bold;")
            status_layout.addWidget(time_label)
        
        layout.addLayout(status_layout)
        
        # Nagrody
        if self.objective.reward_money > 0 or self.objective.reward_satisfaction > 0:
            reward_text = "Nagroda: "
            rewards = []
            if self.objective.reward_money > 0:
                rewards.append(f"${self.objective.reward_money}")
            if self.objective.reward_satisfaction > 0:
                rewards.append(f"+{self.objective.reward_satisfaction}% zadowolenia")
            
            reward_text += ", ".join(rewards)
            
            reward_label = QLabel(reward_text)
            reward_label.setStyleSheet("color: #2e8b57; font-weight: bold; font-size: 9px;")
            layout.addWidget(reward_label)
        
        self.setLayout(layout)
        
        # Stylowanie ramki w zale≈ºno≈õci od statusu
        if self.objective.status == ObjectiveStatus.COMPLETED:
            self.setStyleSheet("QFrame { border: 2px solid green; background-color: #f0fff0; }")
        elif self.objective.status == ObjectiveStatus.FAILED:
            self.setStyleSheet("QFrame { border: 2px solid red; background-color: #fff0f0; }")
        elif self.objective.status == ObjectiveStatus.ACTIVE:
            self.setStyleSheet("QFrame { border: 2px solid blue; background-color: #f0f8ff; }")
        else:
            self.setStyleSheet("QFrame { border: 1px solid gray; background-color: #f5f5f5; }")

class ObjectivesPanel(QWidget):
    """Panel g≈Ç√≥wny dla systemu cel√≥w"""
    
    objective_completed = pyqtSignal(str)  # Signal emitowany gdy cel zostanie uko≈Ñczony
    
    def __init__(self, objective_manager: ObjectiveManager, parent=None):
        super().__init__(parent)
        self.objective_manager = objective_manager
        self.objective_widgets = {}
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout()
        
        # Tytu≈Ç panelu
        title_label = QLabel("üéØ Cele i Misje")
        title_font = QFont()
        title_font.setBold(True)
        title_font.setPointSize(16)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # Podsumowanie postƒôpu
        self.summary_label = QLabel()
        self.summary_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.summary_label.setStyleSheet("background-color: #e6f3ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(self.summary_label)
        
        # Zak≈Çadki dla r√≥≈ºnych typ√≥w cel√≥w
        self.tab_widget = QTabWidget()
        
        # Zak≈Çadka aktywnych cel√≥w
        self.active_tab = QWidget()
        self.active_scroll = QScrollArea()
        self.active_scroll.setWidgetResizable(True)
        self.active_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        self.active_content = QWidget()
        self.active_layout = QVBoxLayout(self.active_content)
        self.active_scroll.setWidget(self.active_content)
        
        active_tab_layout = QVBoxLayout(self.active_tab)
        active_tab_layout.addWidget(self.active_scroll)
        
        # Zak≈Çadka uko≈Ñczonych cel√≥w
        self.completed_tab = QWidget()
        self.completed_scroll = QScrollArea()
        self.completed_scroll.setWidgetResizable(True)
        self.completed_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        
        self.completed_content = QWidget()
        self.completed_layout = QVBoxLayout(self.completed_content)
        self.completed_scroll.setWidget(self.completed_content)
        
        completed_tab_layout = QVBoxLayout(self.completed_tab)
        completed_tab_layout.addWidget(self.completed_scroll)
        
        # Dodaj zak≈Çadki
        self.tab_widget.addTab(self.active_tab, "Aktywne")
        self.tab_widget.addTab(self.completed_tab, "Uko≈Ñczone")
        
        layout.addWidget(self.tab_widget)
        
        # Przycisk od≈õwie≈ºania
        refresh_btn = QPushButton("üîÑ Od≈õwie≈º")
        refresh_btn.clicked.connect(self.refresh_objectives)
        layout.addWidget(refresh_btn)
        
        self.setLayout(layout)
        self.setWindowTitle("Cele i Misje")
        self.resize(400, 600)
        
        # PoczƒÖtkowe za≈Çadowanie cel√≥w
        self.refresh_objectives()
    
    def refresh_objectives(self):
        """Od≈õwie≈ºa wy≈õwietlanie wszystkich cel√≥w"""
        # Wyczy≈õƒá istniejƒÖce widgety
        self.clear_layout(self.active_layout)
        self.clear_layout(self.completed_layout)
        self.objective_widgets.clear()
        
        # Aktywne cele
        active_objectives = self.objective_manager.get_active_objectives()
        if active_objectives:
            for objective in active_objectives:
                widget = ObjectiveWidget(objective)
                self.objective_widgets[objective.id] = widget
                self.active_layout.addWidget(widget)
        else:
            no_active_label = QLabel("Brak aktywnych cel√≥w")
            no_active_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            no_active_label.setStyleSheet("color: gray; font-style: italic; padding: 20px;")
            self.active_layout.addWidget(no_active_label)
        
        # Dodaj spacer na ko≈Ñcu
        self.active_layout.addStretch()
        
        # Uko≈Ñczone cele
        completed_objectives = self.objective_manager.get_completed_objectives()
        if completed_objectives:
            for objective in completed_objectives:
                widget = ObjectiveWidget(objective)
                self.completed_layout.addWidget(widget)
        else:
            no_completed_label = QLabel("Brak uko≈Ñczonych cel√≥w")
            no_completed_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            no_completed_label.setStyleSheet("color: gray; font-style: italic; padding: 20px;")
            self.completed_layout.addWidget(no_completed_label)
        
        # Dodaj spacer na ko≈Ñcu
        self.completed_layout.addStretch()
        
        # Aktualizuj podsumowanie
        self.update_summary()
    
    def clear_layout(self, layout):
        """Czy≈õci wszystkie widgety z layoutu"""
        while layout.count():
            child = layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
    
    def update_summary(self):
        """Aktualizuje podsumowanie postƒôpu"""
        summary = self.objective_manager.get_objectives_summary()
        
        summary_text = (
            f"üìä Postƒôp: {summary['completed']}/{summary['total']} cel√≥w uko≈Ñczonych "
            f"({summary['completion_rate']*100:.1f}%)\n"
            f"üéØ Aktywne: {summary['active']} | "
            f"‚úÖ Uko≈Ñczone: {summary['completed']} | "
            f"‚ùå Nieudane: {summary['failed']}"
        )
        
        self.summary_label.setText(summary_text)
    
    def update_objectives(self, game_state):
        """Aktualizuje cele na podstawie stanu gry"""
        # Sprawd≈∫ czy jakie≈õ cele zosta≈Çy uko≈Ñczone
        old_completed = set(self.objective_manager.completed_objectives)
        
        # Aktualizuj cele
        self.objective_manager.update_objectives(game_state)
        
        # Sprawd≈∫ nowe uko≈Ñczenia
        new_completed = set(self.objective_manager.completed_objectives)
        newly_completed = new_completed - old_completed
        
        # Emituj sygna≈Çy dla nowo uko≈Ñczonych cel√≥w
        for obj_id in newly_completed:
            self.objective_completed.emit(obj_id)
        
        # Od≈õwie≈º widgety tylko je≈õli sƒÖ zmiany
        if newly_completed or self.should_refresh_widgets():
            self.refresh_objectives()
        else:
            # Tylko aktualizuj istniejƒÖce widgety
            self.update_existing_widgets()
    
    def should_refresh_widgets(self):
        """Sprawdza czy nale≈ºy od≈õwie≈ºyƒá widgety"""
        # Sprawd≈∫ czy liczba aktywnych cel√≥w siƒô zmieni≈Ça
        current_active = len(self.objective_manager.get_active_objectives())
        displayed_active = len([w for w in self.objective_widgets.values() 
                               if w.objective.status == ObjectiveStatus.ACTIVE])
        
        return current_active != displayed_active
    
    def update_existing_widgets(self):
        """Aktualizuje istniejƒÖce widgety bez pe≈Çnego od≈õwie≈ºania"""
        for obj_id, widget in self.objective_widgets.items():
            if obj_id in self.objective_manager.objectives:
                # Aktualizuj dane w widgecie
                widget.objective = self.objective_manager.objectives[obj_id]
                # Mo≈ºna dodaƒá tutaj bardziej szczeg√≥≈ÇowƒÖ aktualizacjƒô widgetu
        
        # Aktualizuj podsumowanie
        self.update_summary() 